#usda 1.0
(
    """ This file contains rpr usd schema to allow
        a complete render of a rpr scene within HdRpr.
    """
    subLayers = [
        @usd/schema.usda@
    ]
)

over "GLOBAL" (
    customData = {
        string libraryName       = "rprUsd"
        string libraryPath       = "."
        string libraryPrefix     = "RprUsd"
        dictionary libraryTokens = {
            dictionary cryptomatteName = {
                string doc = """."""
                string value = "rpr:cryptomatteName"
            }
            dictionary id = {
                string doc = """."""
                string value = "rpr:id"
            }
            dictionary rpr = {
                string doc = """."""
            }
        }
    }
) {
}

# TODO: how to define UI properties (min, max, etc)? Check SdfMetadata plugin

class "RprRendererSettingsAPI" (
    inherits = </APISchemaBase>
    customData = {
        string className = "RendererSettingsAPI"
        token apiSchemaType = "singleApply"
        token[] apiSchemaAutoApplyTo = ["RenderSettings"]
    }
    doc = "Defines render settings for AMD Radeon Pro Renderer"
)
{
    uniform token rpr:renderQuality = "Northstar" (
        allowedTokens = ["Low", "Medium", "High", "Full", "Northstar"]
        customData = {
            string apiName = "renderQuality"
        }
        displayName = "Render Quality"
        doc = ""
    )

    uniform bool rpr:denoising = false (
        customData = {
            string apiName = "denoising"
        }
        displayGroup = "Denoise"
        displayName = "AI Denoise"
        doc = ""
    )

    uniform int rpr:maxSamples = 256 (
        customData = {
            string apiName = "maxSamples"
        }
        displayGroup = "Samples"
        displayName = "Max Samples"
        doc = "Maximum number of samples to render for each pixel."
    )

    uniform float rpr:radianceClamping = 0.0 (
        customData = {
            string apiName = "radianceClamping"
        }
        displayGroup = "Quality"
        displayName = "Max Radiance"
        doc = "Limits the intensity, or the maximum brightness, of samples in the scene. Greater clamp radiance values produce more brightness. Set to 0.0 ot disable clamping."
    )
}

class "RprObjectSettingsAPI" (
    customData = {
        string className = "ObjectSettingsAPI"
        token apiSchemaType = "singleApply"
    }
    inherits = </APISchemaBase>
)
{
    uniform int primvars:rpr:object:transform:samples = 1 (
        customData = {
            string apiName = "objectTransformSamples"
        }
        displayGroup = "Object"
        displayName = "Motion Blur Transform Samples"
        doc = ""
    )

    uniform int primvars:rpr:object:deform:samples = 3 (
        customData = {
            string apiName = "objectDeformSamples"
        }
        displayGroup = "Object"
        displayName = "Motion Blur Deform Samples"
        doc = ""
    )

    int primvars:rpr:object:id = 0 (
        customData = {
            string apiName = "objectId"
        }
        displayGroup = "Object"
        displayName = "ID"
        doc = "Index number of the 'Object Index' render pass"
    )

    bool primvars:rpr:object:visibility:camera = true (
        customData = {
            string apiName = "objectVisibilityCamera"
        }
        displayGroup = "Visibility"
        displayName = "Visibility Camera"
        doc = """ Used to show or hide an object from the camera.
                  Disabling camera visibility is the most optimized way to hide an object from the camera but still have it cast shadows, be visible in reflections, etc.
              """
    )

    bool primvars:rpr:object:visibility:diffuse = true (
        customData = {
            string apiName = "objectVisibilityDiffuse"
        }
        displayGroup = "Visibility"
        displayName = "Visibility Diffuse"
        doc = "Diffuse visibility affects indirect diffuse rays and makes an object visible or invisible in reflections on diffuse surfaces."
    )

    bool primvars:rpr:object:visibility:shadow = true (
        customData = {
            string apiName = "objectVisibilityShadow"
        }
        displayGroup = "Visibility"
        displayName = "Visibility Shadow"
        doc = "Shadow visibility controls whether to show or to hide shadows cast by the object onto other surfaces (including reflected shadows and shadows seen through transparent objects). You might need this option to hide shadows that darken other objects in the scene or create unwanted effects."
    )

    bool primvars:rpr:object:visibility:reflection = true (
        customData = {
            string apiName = "objectVisibilityReflection"
        }
        displayGroup = "Visibility"
        displayName = "Visibility Reflection"
        doc = "Reflection visibility makes an object visible or invisible in reflections on specular surfaces. Note that hiding an object from specular reflections keeps its shadows (including reflected shadows) visible."
    )

    bool primvars:rpr:object:visibility:glossyReflection = true (
        customData = {
            string apiName = "objectVisibilityGlossyReflection"
        }
        displayGroup = "Visibility"
        displayName = "Visibility Glossy Reflection"
        doc = ""
    )

    bool primvars:rpr:object:visibility:refraction = true (
        customData = {
            string apiName = "objectVisibilityRefraction"
        }
        displayGroup = "Visibility"
        displayName = "Visibility Refraction"
        doc = "Refraction visibility makes an object visible or invisible when seen through transparent objects. Note that hiding an object from refractive rays keeps its shadows (including refracted shadows) visible."
    )

    bool primvars:rpr:object:visibility:glossyRefraction = true (
        customData = {
            string apiName = "objectVisibilityGlossyRefraction"
        }
        displayGroup = "Visibility"
        displayName = "Visibility Glossy Refraction"
        doc = ""
    )

    bool primvars:rpr:object:visibility:transparent = true (
        customData = {
            string apiName = "objectVisibilityTransparent"
        }
        displayGroup = "Visibility"
        displayName = "Visibility Transparent"
        doc = ""
    )

    bool primvars:rpr:object:visibility:light = true (
        customData = {
            string apiName = "objectVisibilityLight"
        }
        displayGroup = "Visibility"
        displayName = "Visibility Light"
        doc = ""
    )

    string primvars:rpr:object:assetName = "" (
        customData = {
            string apiName = "objectAssetName"
        }
        displayGroup = "Object"
        displayName = "Asset Name"
        doc = "Asset name for cryptomatte asset pass"
    )

    # TODO: implement it
    # string primvars:rpr:object:lightgroup = "" (
    #     customData = {
    #         string apiName = "lightgroup"
    #     }
    #     displayGroup = "Object"
    #     displayName = "Light Group"
    #     doc = "Light Group name to output to corresponding AOV"
    # )
}

class "RprMeshSettingsAPI" (
    customData = {
        string className = "MeshSettingsAPI"
        token apiSchemaType = "singleApply"
        token[] apiSchemaAutoApplyTo = ["Mesh"]
    }
    inherits = </RprObjectSettingsAPI>
)
{
    uniform int primvars:rpr:mesh:subdivisionLevel = 0 (
        customData = {
            string apiName = "meshSubdivisionLevel"
        }
        displayGroup = "Subdivision"
        displayName = "Subdivision Level"
        doc = ""
    )

    uniform int primvars:rpr:mesh:ignoreContour = 0 (
        customData = {
            string apiName = "meshIgnoreContour"
        }
        displayGroup = "Contour"
        displayName = "Ignore Contour"
        doc = "Whether to extract contour for a mesh or not. Works with RPR2 only."
    )
}

class "RprMaterialSettingsAPI" (
    customData = {
        string className = "MaterialSettingsAPI"
        token apiSchemaType = "singleApply"
        token[] apiSchemaAutoApplyTo = ["Material"]
    }
    inherits = </APISchemaBase>
)
{
    uniform int rpr:material:id = 0 (
        customData = {
            string apiName = "materialId"
        }
        displayGroup = "Material"
        displayName = "ID"
        doc = ""
    )

    uniform string rpr:material:assetName = "" (
        customData = {
            string apiName = "materialAssetName"
        }
        displayGroup = "Material"
        displayName = "Asset Name"
        doc = "Asset name for cryptomatte asset pass"
    )
}

class "RprDomeLightSettingsAPI" (
    customData = {
        string className = "DomeLightSettingsAPI"
        token apiSchemaType = "singleApply"
    }
    inherits = </APISchemaBase>
)
{
    uniform bool rpr:domeLight:backgroundOverride = false (
        customData = {
            string apiName = "domeLightBackgroundOverride"
        }
        displayGroup = "DomeLight"
        displayName = "Background Override"
        doc = "Whether to override background. Either backgroundColorOverride or backgroundTextureOverride must be set."
    )

    uniform color3f rpr:domeLight:backgroundColorOverride = (1, 1, 1) (
        customData = {
            string apiName = "domeLightBackgroundColorOverride"
        }
        displayGroup = "DomeLight"
        displayName = "Background Color Override"
        doc = "Color that overrides background"
    )

    asset rpr:domeLight:backgroundTextureOverride = "" (
        customData = {
            string apiName = "domeLightBackgroundTextureOverride"
        }
        displayGroup = "DomeLight"
        displayName = "Background Texture Override"
        doc = "Path to a texture that overrides background"
    )
}
