#usda 1.0
(
    """ This file contains rpr usd schema to allow
        a complete render of a rpr scene within HdRpr.
    """
    subLayers = [
        @usd/schema.usda@
    ]
)

over "GLOBAL" (
    customData = {
        string libraryName       = "rprUsd"
        string libraryPath       = "."
        string libraryPrefix     = "RprUsd"
        dictionary libraryTokens = {
            dictionary rpr = {
                string doc = """."""
            }
            dictionary rprMinValue = {
                string doc = """RPR specific Sdf metadata"""
            }
            dictionary rprMaxValue = {
                string doc = """RPR specific Sdf metadata"""
            }
            dictionary rprHidden = {
                string doc = """RPR specific Sdf metadata"""
            }
        }
    }
) {
}

class "RprRendererSettingsAPI" (
    inherits = </APISchemaBase>
    customData = {
        string className = "RendererSettingsAPI"
        token apiSchemaType = "singleApply"
        token[] apiSchemaAutoApplyTo = ["RenderSettings"]
    }
    doc = "Defines render settings for AMD Radeon Pro Renderer"
)
{
    uniform token rpr:core:renderQuality = "Northstar" (
        allowedTokens = ["Low", "Medium", "High", "HybridPro", "Full", "Northstar"]
        displayName = "Render Quality"
        displayGroup = "General"
    )

    uniform token rpr:core:renderMode = "Global Illumination" (
        allowedTokens = ["Global Illumination", "Direct Illumination", "Wireframe", "Material Index", "Position", "Normal", "Texcoord", "Ambient Occlusion", "Diffuse", "Contour"]
        displayName = "Render Mode"
        displayGroup = "General|Render Mode"
    )

    uniform bool rpr:core:flipVertical = false (
        displayName = "Flip Vertical"
        displayGroup = "General"
    )

    # tahoe only
    uniform float rpr:ambientOcclusion:radius = 1.0 (
        displayName = "Ambient Occlusion Radius"
        displayGroup = "General|Render Mode"
        rprMinValue = 0.0
        rprMaxValue = 100.0
    )

    # northstar only
    uniform float rpr:contour:antialiasing = 1.0 (
        displayName = "Antialiasing"
        displayGroup = "General|Render Mode|Contour"
        rprMinValue = 0.0
        rprMaxValue = 1.0
    )
    uniform bool rpr:contour:useNormal = true (
        displayName = "Use Normal"
        displayGroup = "General|Render Mode|Contour"
        doc = "Whether to use geometry normals for edge detection or not"
    )
    uniform float rpr:contour:linewidthNormal = 1.0 (
        displayName = "Linewidth Normal"
        displayGroup = "General|Render Mode|Contour"
        doc = "Linewidth of edges detected via normals."
        rprMinValue = 0.0
        rprMaxValue = 100.0
    )
    uniform float rpr:contour:normalThreshold = 45.0 (
        displayName = "Normal Threshold"
        displayGroup = "General|Render Mode|Contour"
        rprMinValue = 0.0
        rprMaxValue = 180.0
    )
    uniform bool rpr:contour:usePrimId = true (
        displayName = "Use Primitive Id"
        displayGroup = "General|Render Mode|Contour"
        doc = "Whether to use primitive Id for edge detection or not."
    )
    uniform float rpr:contour:linewidthPrimId = 1.0 (
        displayName = "Linewidth Primitive Id"
        displayGroup = "General|Render Mode|Contour"
        doc = "Linewidth of edges detected via Primitive Id."
        rprMinValue = 0.0
        rprMaxValue = 100.0
    )
    uniform bool rpr:contour:useMaterialId = true (
        displayName = "Use Material Id"
        displayGroup = "General|Render Mode|Contour"
        doc = "Whether to use material Id for edge detection or not."
    )
    uniform float rpr:contour:linewidthMaterialId = 1.0 (
        displayName = "Linewidth Material Id"
        displayGroup = "General|Render Mode|Contour"
        doc = "Linewidth of edges detected via Material Id."
        rprMinValue = 0.0
        rprMaxValue = 100.0
    )
    uniform bool rpr:contour:useUv = true (
        displayName = "Use UV"
        displayGroup = "General|Render Mode|Contour"
        doc = "Whether to use UV for edge detection or not"
    )
    uniform float rpr:contour:linewidthUv = 1.0 (
        displayName = "Linewidth UV"
        displayGroup = "General|Render Mode|Contour"
        doc = "Linewidth of edges detected via UV."
        rprMinValue = 0.0
        rprMaxValue = 100.0
    )
    uniform float rpr:contour:uvThreshold = 1.0 (
        displayName = "Normal Threshold"
        displayGroup = "General|Render Mode|Contour"
        doc = "Threshold of edges detected via UV."
        rprMinValue = 0.0
        rprMaxValue = 100.0
    )
    uniform bool rpr:contour:debug = false (
        displayName = "Debug"
        displayGroup = "General|Render Mode|Contour"
        doc = """ Whether to show colored outlines according to used features or not.
                  Colors legend:
                   * red - primitive Id
                   * green - material Id
                   * blue - normal
                   * yellow - primitive Id + material Id
                   * magenta - primitive Id + normal
                   * cyan - material Id + normal
                   * black - all
              """
    )

    uniform token rpr:core:cameraMode = "default" (
        allowedTokens = ["default", "Latitude Longitude 360", "Latitude Longitude Stereo", "Cubemap", "Cubemap Stereo", "Fisheye"]
        displayName = "Camera Mode"
        displayGroup = "General"
    )

    uniform bool rpr:alpha:enable = false (
        displayName = "Enable Color Alpha"
        displayGroup = "General"
        doc = ""
    )
	
    uniform double stageMetersPerUnit = 1.0 (
        displayName = "Meters Per Unit"
        displayGroup = "General"
	doc = "Scene unit size in meters"
    )

    # Northstar only
    uniform bool rpr:beautyMotionBlur:enable = true (
        displayName = "Enable Beauty Motion Blur"
        displayGroup = "General"
        doc = "If disabled, only velocity AOV will store information about movement on the scene. Required for motion blur that is generated in post-processing."
    )

    # Not for Hybrid
    uniform bool rpr:uniformSeed = true (
        displayName = "Use Uniform Seed"
        displayGroup = "General"
    )

    # not for < High
    uniform bool rpr:denoising:enable = false (
        displayGroup = "Postprocessing|Denoise"
        displayName = "Enable AI Denoise"
    )
    uniform int rpr:denoising:minIter = 4 (
        displayGroup = "Postprocessing|Denoise"
        displayName = "Min Iteration"
        rprMinValue = 1
    )
    uniform int rpr:denoising:iterStep = 32 (
        displayGroup = "Postprocessing|Denoise"
        displayName = "Iteration Step"
        rprMinValue = 1
    )

    # not for low
    uniform int rpr:maxSamples = 256 (
        displayGroup = "Sampling"
        displayName = "Max Samples"
        doc = "Maximum number of samples to render for each pixel."
        rprMinValue = 1
    )

    # tahoe and northstar only
    uniform int rpr:adaptiveSampling:minSamples = 64 (
        displayGroup = "Sampling"
        displayName = "Min Samples"
        doc = "Minimum number of samples to render for each pixel. After this, adaptive sampling will stop sampling pixels where noise is less than 'Variance Threshold'."
        rprMinValue = 1
    )
    uniform float rpr:adaptiveSampling:noiseTreshold = 0.0 (
        displayGroup = "Sampling"
        displayName = "Noise Threshold"
        doc = "Cutoff for adaptive sampling. Once pixels are below this amount of noise, no more samples are added. Set to 0 for no cutoff."
        rprMinValue = 0.0
        rprMaxValue = 1.0
    )

    # not for hybrid
    uniform int rpr:quality:rayDepth = 3 (
        displayName = "Max Ray Depth"
        displayGroup = "Quality"
        doc = "The number of times that a ray bounces off various surfaces before being terminated."
        rprMinValue = 1
        rprMaxValue = 50
    )
    uniform int rpr:quality:rayDepthDiffuse = 3 (
        displayName = "Diffuse Ray Depth"
        displayGroup = "Quality"
        doc = "The maximum number of times that a light ray can be bounced off diffuse surfaces."
        rprMinValue = 0
        rprMaxValue = 50
    )
    uniform int rpr:quality:rayDepthGlossy = 3 (
        displayName = "Glossy Ray Depth"
        displayGroup = "Quality"
        doc = "The maximum number of ray bounces from specular surfaces."
        rprMinValue = 0
        rprMaxValue = 50
    )
    uniform int rpr:quality:rayDepthRefraction = 3 (
        displayName = "Refraction Ray Depth"
        displayGroup = "Quality"
        doc = "The maximum number of times that a light ray can be refracted, and is designated for clear transparent materials, such as glass."
        rprMinValue = 0
        rprMaxValue = 50
    )
    uniform int rpr:quality:rayDepthGlossyRefraction = 3 (
        displayName = "Glossy Refraction Ray Depth"
        displayGroup = "Quality"
        doc = "The Glossy Refraction Ray Depth parameter is similar to the Refraction Ray Depth. The difference is that it is aimed to work with matte refractive materials, such as semi-frosted glass."
        rprMinValue = 0
        rprMaxValue = 50
    )
    uniform int rpr:quality:rayDepthShadow = 3 (
        displayName = "Shadow Ray Depth"
        displayGroup = "Quality"
        doc = "Controls the accuracy of shadows cast by transparent objects. It defines the maximum number of surfaces that a light ray can encounter on its way causing these surfaces to cast shadows."
        rprMinValue = 0
        rprMaxValue = 50
    )
    uniform float rpr:quality:raycastEpsilon = 0.002 (
        displayName = "Ray Cast Epsilon"
        displayGroup = "Quality"
        doc = "Determines an offset used to move light rays away from the geometry for ray-surface intersection calculations."
        rprMinValue = 0.000001
        rprMaxValue = 1.0
    )
    uniform float rpr:quality:radianceClamping = 0.0 (
        displayGroup = "Quality"
        displayName = "Max Radiance"
        doc = "Limits the intensity, or the maximum brightness, of samples in the scene. Greater clamp radiance values produce more brightness. Set to 0.0 ot disable clamping."
        rprMinValue = 0.0
        rprMaxValue = 1000000
    )

    # northstar only
    uniform float rpr:quality:imageFilterRadius = 1.5 (
        displayGroup = "Quality"
        displayName = "Pixel filter width"
        doc = "Determines Pixel filter width (anti-aliasing)."
        rprMinValue = 0.0
        rprMaxValue = 5.0
    )

    # not for hybrid
    uniform int rpr:quality:interactive:rayDepth = 2 (
        displayName = "Max Ray Depth"
        displayGroup = "Quality|Interactive"
        doc = "Controls value of 'Max Ray Depth' in interactive mode."
        rprMinValue = 1
        rprMaxValue = 50
    )
    # northstar only
    uniform int rpr:quality:interactive:resolutionDownscale = 3 (
        displayName = "Resolution Downscale"
        displayGroup = "Quality|Interactive"
        doc = "Controls how much rendering resolution is downscaled in interactive mode. Formula: resolution / (2 ^ downscale). E.g. downscale==2 will give you 4 times smaller rendering resolution."
        rprMinValue = 0
        rprMaxValue = 10
    )
    # tahoe only
    uniform bool rpr:quality:interactive:enableDownscale = true (
        displayName = "Enable Downscale"
        displayGroup = "Quality|Interactive"
        doc = "Controls whether in interactive mode resolution should be downscaled or no."
    )

    uniform bool rpr:tonemapping:enable = false (
        displayName = "Enable Tonemapping"
        displayGroup = "Postprocessing|Tonemapping"
        doc = "Enable linear photographic tone mapping filter. More info in RIF documentation."
    )
    uniform float rpr:tonemapping:exposureTime = 0.125 (
        displayName = "Film Exposure Time (sec)"
        displayGroup = "Postprocessing|Tonemapping"
        rprMinValue = 0.0
        rprMaxValue = 10.0
    )
    uniform float rpr:tonemapping:sensitivity = 1.0 (
        displayName = "Film Exposure Time (sec)"
        displayGroup = "Postprocessing|Tonemapping"
        doc = "Luminance of the scene (in candela per m^2)."
        rprMinValue = 0.0
        rprMaxValue = 10.0
    )
    uniform float rpr:tonemapping:fstop = 1.0 (
        displayName = "Fstop"
        displayGroup = "Postprocessing|Tonemapping"
        doc = "Aperture f-number."
        rprMinValue = 0.0
        rprMaxValue = 100.0
    )
    uniform float rpr:tonemapping:gamma = 1.0 (
        displayName = "Gamma"
        displayGroup = "Postprocessing|Tonemapping"
        doc = "Gamma correction value."
        rprMinValue = 0.0
        rprMaxValue = 5.0
    )

    uniform bool rpr:gamma:enable = false (
        displayName = "Enable Gamma"
        displayGroup = "Postprocessing|Gamma"
        doc = "Enable gamma correction."
    )
    uniform float rpr:gamma:value = 1.0 (
        displayName = "Gamma"
        displayGroup = "Postprocessing|Gamma"
        doc = "Gamma correction value."
        rprMinValue = 0.0
        rprMaxValue = 5.0
    )

    # Northstar only
    uniform asset rpr:ocio:configPath = "" (
        displayName = "Config Path"
        displayGroup = "General|OpenColorIO"
        doc = "The file path of the OpenColorIO config file to be used. Overrides any value specified in OCIO environment variable."
    )
    uniform string rpr:ocio:renderingColorSpace = "" (
        displayName = "Rendering Color Space"
        displayGroup = "General|OpenColorIO"
    )

    # Northstar only
    uniform asset rpr:cryptomatte:outputPath = "" (
        displayName = "Output Path"
        displayGroup = "General|Cryptomatte"
        doc = "Controls where cryptomatte should be saved. Use 'Cryptomatte Output Mode' to control when cryptomatte is saved."
    )
    uniform token rpr:cryptomatte:outputMode = "Batch" (
        allowedTokens = ["Batch", "Interactive"]
        displayName = "Output Mode"
        displayGroup = "General|Cryptomatte"
        doc = "Batch - save cryptomatte only in the batch rendering mode (USD Render ROP, husk). Interactive - same as the Batch but also save cryptomatte in the non-batch rendering mode. Cryptomatte always saved after 'Max Samples' is reached."
    )
    uniform bool rpr:cryptomatte:previewLayer = false (
        displayName = "Add Preview Layer"
        displayGroup = "General|Cryptomatte"
        doc = "Whether to generate cryptomatte preview layer or not. Whether you need it depends on the software you are planning to use cryptomatte in. For example, Houdini's COP Cryptomatte requires it, Nuke, on contrary, does not."
    )

    uniform asset rpr:export:path = "" (
        displayName = "Path"
        displayGroup = "Export .rpr"
        rprHidden = 1
    )
    uniform bool rpr:export:asSingleFile = false (
        displayName = "As Single File"
        displayGroup = "Export .rpr"
        rprHidden = 1
    )
    uniform bool rpr:export:useImageCache = false (
        displayName = "Use Image Cache"
        displayGroup = "Export .rpr"
        rprHidden = 1
    )
}

class "RprObjectSettingsAPI" (
    customData = {
        string className = "ObjectSettingsAPI"
        token apiSchemaType = "singleApply"
    }
    inherits = </APISchemaBase>
)
{
    uniform int primvars:rpr:object:transform:samples = 1 (
        customData = {
            string apiName = "objectTransformSamples"
        }
        displayGroup = "Object"
        displayName = "Motion Blur Transform Samples"
        doc = ""
    )

    uniform int primvars:rpr:object:deform:samples = 3 (
        customData = {
            string apiName = "objectDeformSamples"
        }
        displayGroup = "Object"
        displayName = "Motion Blur Deform Samples"
        doc = ""
    )

    int primvars:rpr:object:id = 0 (
        customData = {
            string apiName = "objectId"
        }
        displayGroup = "Object"
        displayName = "ID"
        doc = "Index number of the 'Object Index' render pass"
    )

    bool primvars:rpr:object:visibility:camera = true (
        customData = {
            string apiName = "objectVisibilityCamera"
        }
        displayGroup = "Visibility"
        displayName = "Visibility Camera"
        doc = """ Used to show or hide an object from the camera.
                  Disabling camera visibility is the most optimized way to hide an object from the camera but still have it cast shadows, be visible in reflections, etc.
              """
    )

    bool primvars:rpr:object:visibility:diffuse = true (
        customData = {
            string apiName = "objectVisibilityDiffuse"
        }
        displayGroup = "Visibility"
        displayName = "Visibility Diffuse"
        doc = "Diffuse visibility affects indirect diffuse rays and makes an object visible or invisible in reflections on diffuse surfaces."
    )

    bool primvars:rpr:object:visibility:shadow = true (
        customData = {
            string apiName = "objectVisibilityShadow"
        }
        displayGroup = "Visibility"
        displayName = "Visibility Shadow"
        doc = "Shadow visibility controls whether to show or to hide shadows cast by the object onto other surfaces (including reflected shadows and shadows seen through transparent objects). You might need this option to hide shadows that darken other objects in the scene or create unwanted effects."
    )

    bool primvars:rpr:object:visibility:reflection = true (
        customData = {
            string apiName = "objectVisibilityReflection"
        }
        displayGroup = "Visibility"
        displayName = "Visibility Reflection"
        doc = "Reflection visibility makes an object visible or invisible in reflections on specular surfaces. Note that hiding an object from specular reflections keeps its shadows (including reflected shadows) visible."
    )

    bool primvars:rpr:object:visibility:glossyReflection = true (
        customData = {
            string apiName = "objectVisibilityGlossyReflection"
        }
        displayGroup = "Visibility"
        displayName = "Visibility Glossy Reflection"
        doc = ""
    )

    bool primvars:rpr:object:visibility:refraction = true (
        customData = {
            string apiName = "objectVisibilityRefraction"
        }
        displayGroup = "Visibility"
        displayName = "Visibility Refraction"
        doc = "Refraction visibility makes an object visible or invisible when seen through transparent objects. Note that hiding an object from refractive rays keeps its shadows (including refracted shadows) visible."
    )

    bool primvars:rpr:object:visibility:glossyRefraction = true (
        customData = {
            string apiName = "objectVisibilityGlossyRefraction"
        }
        displayGroup = "Visibility"
        displayName = "Visibility Glossy Refraction"
        doc = ""
    )

    bool primvars:rpr:object:visibility:transparent = true (
        customData = {
            string apiName = "objectVisibilityTransparent"
        }
        displayGroup = "Visibility"
        displayName = "Visibility Transparent"
        doc = ""
    )

    string primvars:rpr:object:assetName = "" (
        customData = {
            string apiName = "objectAssetName"
        }
        displayGroup = "Object"
        displayName = "Asset Name"
        doc = "Asset name for cryptomatte asset pass"
    )

    # TODO: implement it
    # string primvars:rpr:object:lightgroup = "" (
    #     customData = {
    #         string apiName = "lightgroup"
    #     }
    #     displayGroup = "Object"
    #     displayName = "Light Group"
    #     doc = "Light Group name to output to corresponding AOV"
    # )
}

class "RprMeshSettingsAPI" (
    customData = {
        string className = "MeshSettingsAPI"
        token apiSchemaType = "singleApply"
        token[] apiSchemaAutoApplyTo = ["Gprim"]
    }
    inherits = </APISchemaBase>
)
{
    uniform int primvars:rpr:object:transform:samples = 1 (
        customData = {
            string apiName = "objectTransformSamples"
        }
        displayGroup = "Object"
        displayName = "Motion Blur Transform Samples"
        doc = ""
    )

    uniform int primvars:rpr:object:deform:samples = 3 (
        customData = {
            string apiName = "objectDeformSamples"
        }
        displayGroup = "Object"
        displayName = "Motion Blur Deform Samples"
        doc = ""
    )

    int primvars:rpr:object:id = 0 (
        customData = {
            string apiName = "objectId"
        }
        displayGroup = "Object"
        displayName = "ID"
        doc = "Index number of the 'Object Index' render pass"
    )

    bool primvars:rpr:object:visibility:camera = true (
        customData = {
            string apiName = "objectVisibilityCamera"
        }
        displayGroup = "Visibility"
        displayName = "Visibility Camera"
        doc = """ Used to show or hide an object from the camera.
                  Disabling camera visibility is the most optimized way to hide an object from the camera but still have it cast shadows, be visible in reflections, etc.
              """
    )

    bool primvars:rpr:object:visibility:diffuse = true (
        customData = {
            string apiName = "objectVisibilityDiffuse"
        }
        displayGroup = "Visibility"
        displayName = "Visibility Diffuse"
        doc = "Diffuse visibility affects indirect diffuse rays and makes an object visible or invisible in reflections on diffuse surfaces."
    )

    bool primvars:rpr:object:visibility:shadow = true (
        customData = {
            string apiName = "objectVisibilityShadow"
        }
        displayGroup = "Visibility"
        displayName = "Visibility Shadow"
        doc = "Shadow visibility controls whether to show or to hide shadows cast by the object onto other surfaces (including reflected shadows and shadows seen through transparent objects). You might need this option to hide shadows that darken other objects in the scene or create unwanted effects."
    )

    bool primvars:rpr:object:visibility:reflection = true (
        customData = {
            string apiName = "objectVisibilityReflection"
        }
        displayGroup = "Visibility"
        displayName = "Visibility Reflection"
        doc = "Reflection visibility makes an object visible or invisible in reflections on specular surfaces. Note that hiding an object from specular reflections keeps its shadows (including reflected shadows) visible."
    )

    bool primvars:rpr:object:visibility:glossyReflection = true (
        customData = {
            string apiName = "objectVisibilityGlossyReflection"
        }
        displayGroup = "Visibility"
        displayName = "Visibility Glossy Reflection"
        doc = ""
    )

    bool primvars:rpr:object:visibility:refraction = true (
        customData = {
            string apiName = "objectVisibilityRefraction"
        }
        displayGroup = "Visibility"
        displayName = "Visibility Refraction"
        doc = "Refraction visibility makes an object visible or invisible when seen through transparent objects. Note that hiding an object from refractive rays keeps its shadows (including refracted shadows) visible."
    )

    bool primvars:rpr:object:visibility:glossyRefraction = true (
        customData = {
            string apiName = "objectVisibilityGlossyRefraction"
        }
        displayGroup = "Visibility"
        displayName = "Visibility Glossy Refraction"
        doc = ""
    )

    bool primvars:rpr:object:visibility:transparent = true (
        customData = {
            string apiName = "objectVisibilityTransparent"
        }
        displayGroup = "Visibility"
        displayName = "Visibility Transparent"
        doc = ""
    )

    bool primvars:rpr:object:visibility:light = true (
        customData = {
            string apiName = "objectVisibilityLight"
        }
        displayGroup = "Visibility"
        displayName = "Visibility Light"
        doc = ""
    )

    string primvars:rpr:object:assetName = "" (
        customData = {
            string apiName = "objectAssetName"
        }
        displayGroup = "Object"
        displayName = "Asset Name"
        doc = "Asset name for cryptomatte asset pass"
    )

    uniform int primvars:rpr:mesh:subdivisionLevel = 0 (
        customData = {
            string apiName = "subdivisionLevel"
        }
        displayGroup = "Subdivision"
        displayName = "Subdivision Level"
        doc = ""
    )

    uniform int primvars:rpr:mesh:ignoreContour = 0 (
        customData = {
            string apiName = "ignoreContour"
        }
        displayGroup = "Contour"
        displayName = "Ignore Contour"
        doc = "Whether to extract contour for a mesh or not. Works with RPR2 only."
    )
}

class "RprMaterialSettingsAPI" (
    customData = {
        string className = "MaterialSettingsAPI"
        token apiSchemaType = "singleApply"
        token[] apiSchemaAutoApplyTo = ["Material"]
    }
    inherits = </APISchemaBase>
)
{
    uniform int rpr:material:id = 0 (
        customData = {
            string apiName = "id"
        }
        displayGroup = "Material"
        displayName = "ID"
        doc = ""
    )

    uniform string rpr:material:assetName = "" (
        customData = {
            string apiName = "assetName"
        }
        displayGroup = "Material"
        displayName = "Asset Name"
        doc = "Asset name for cryptomatte asset pass"
    )
}

class "RprLightSettingsAPI" (
    customData= {
        string className = "LightSettingsAPI"
        token apiSchemaType = "singleApply"
        token[] apiSchemaAutoApplyTo = ["SphereLight", "DiskLight", "RectLight", "CylinderLight"]
    }
    inherits = </APISchemaBase>
)
{
    uniform bool rpr:object:visibility:camera = false (
        customData = {
            string apiName = "objectVisibilityCamera"
        }
        displayGroup = "Visibility"
        displayName = "Visibility Camera"
        doc = """ Used to show or hide an object from the camera.
                  Disabling camera visibility is the most optimized way to hide an object from the camera but still have it cast shadows, be visible in reflections, etc.
              """
    )

    uniform bool rpr:object:visibility:diffuse = true (
        customData = {
            string apiName = "objectVisibilityDiffuse"
        }
        displayGroup = "Visibility"
        displayName = "Visibility Diffuse"
        doc = "Diffuse visibility affects indirect diffuse rays and makes an object visible or invisible in reflections on diffuse surfaces."
    )

    uniform bool rpr:object:visibility:shadow = false (
        customData = {
            string apiName = "objectVisibilityShadow"
        }
        displayGroup = "Visibility"
        displayName = "Visibility Shadow"
        doc = "Shadow visibility controls whether to show or to hide shadows cast by the object onto other surfaces (including reflected shadows and shadows seen through transparent objects). You might need this option to hide shadows that darken other objects in the scene or create unwanted effects."
    )

    uniform bool rpr:object:visibility:reflection = true (
        customData = {
            string apiName = "objectVisibilityReflection"
        }
        displayGroup = "Visibility"
        displayName = "Visibility Reflection"
        doc = "Reflection visibility makes an object visible or invisible in reflections on specular surfaces. Note that hiding an object from specular reflections keeps its shadows (including reflected shadows) visible."
    )

    uniform bool rpr:object:visibility:glossyReflection = true (
        customData = {
            string apiName = "objectVisibilityGlossyReflection"
        }
        displayGroup = "Visibility"
        displayName = "Visibility Glossy Reflection"
        doc = ""
    )

    uniform bool rpr:object:visibility:refraction = true (
        customData = {
            string apiName = "objectVisibilityRefraction"
        }
        displayGroup = "Visibility"
        displayName = "Visibility Refraction"
        doc = "Refraction visibility makes an object visible or invisible when seen through transparent objects. Note that hiding an object from refractive rays keeps its shadows (including refracted shadows) visible."
    )

    uniform bool rpr:object:visibility:glossyRefraction = true (
        customData = {
            string apiName = "objectVisibilityGlossyRefraction"
        }
        displayGroup = "Visibility"
        displayName = "Visibility Glossy Refraction"
        doc = ""
    )

    uniform bool rpr:object:visibility:transparent = true (
        customData = {
            string apiName = "objectVisibilityTransparent"
        }
        displayGroup = "Visibility"
        displayName = "Visibility Transparent"
        doc = ""
    )
}

class "RprDomeLightSettingsAPI" (
    customData = {
        string className = "DomeLightSettingsAPI"
        token apiSchemaType = "singleApply"
        token[] apiSchemaAutoApplyTo = ["DomeLight"]
    }
    inherits = </APISchemaBase>
)
{
    uniform bool rpr:backgroundOverride:enable = false (
        customData = {
            string apiName = "domeLightBackgroundOverride"
        }
        displayGroup = "RPR"
        displayName = "Background Override"
        doc = "Whether to override background."
    )

    uniform color3f rpr:backgroundOverride:color = (1, 1, 1) (
        customData = {
            string apiName = "backgroundOverrideColor"
        }
        displayGroup = "RPR"
        displayName = "Background Override Color"
        doc = "Color that overrides background"
    )

    # TODO: implement it when needed
    # uniform asset rpr:backgroundOverride:texture = "" (
    #     customData = {
    #         string apiName = "backgroundOverrideTexture"
    #     }
    #     displayGroup = "RPR"
    #     displayName = "Background Override Texture"
    #     doc = "Texture that overrides background"
    # )
}

class "RprCameraSettingsAPI" (
    customData = {
        string className = "CameraSettingsAPI"
        token apiSchemaType = "singleApply"
        token[] apiSchemaAutoApplyTo = ["Camera"]
    }
    inherits = </APISchemaBase>
)
{
    uint rpr:camera:blades = 16 (
        customData = {
            string apiName = "apertureBlades"
        }
        displayGroup = "Aperture"
        displayName = "Aperture Blades"
        doc = ""
    )
}
