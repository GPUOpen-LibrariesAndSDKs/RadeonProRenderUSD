#include <map>
#include <fstream>
#include <cstdlib>
#include <iostream>
#include <functional>

#include <ghc/filesystem.hpp>
namespace fs = ghc::filesystem;

#if defined(__linux__)
#include <unistd.h>
#include <sys/stat.h>
#endif

#if defined(_WIN32) || defined(_WIN64)
#include <windows.h>
#include <atlstr.h>
#elif defined(__APPLE__)
#include <mach-o/dyld.h>
#endif

using CharType = fs::path::value_type;
using StringType = fs::path::string_type;

#ifndef ARCH_PATH_MAX
    #ifdef PATH_MAX
        #define ARCH_PATH_MAX PATH_MAX
    #else
        #ifdef MAXPATHLEN
            #define ARCH_PATH_MAX MAXPATHLEN
        #else
            #ifdef _MAX_PATH
                #define ARCH_PATH_MAX _MAX_PATH
            #else
                #define ARCH_PATH_MAX 1024
            #endif
        #endif
    #endif
#endif

// Getting the executable path requires a dynamically allocated buffer
// on all platforms.  This helper function handles the allocation.
StringType _DynamicSizedRead(
    size_t initialSize,
    const std::function<bool(CharType*, size_t*)>& callback) {
    // Make a buffer for the data.
    // We use an explicit deleter to work around libc++ bug.
    // See https://llvm.org/bugs/show_bug.cgi?id=18350.
    std::unique_ptr<CharType, std::default_delete<CharType[]> > buffer;
    buffer.reset(new CharType[initialSize]);

    // Repeatedly invoke the callback with our buffer until it's big enough.
    size_t size = initialSize;
    while (!callback(buffer.get(), &size)) {
        if (size == std::numeric_limits<size_t>::max()) {
            // callback is never going to succeed.
            return StringType();
        }
        buffer.reset(new CharType[size]);
    }

    // Make a string.
    return StringType(buffer.get());
}

fs::path ArchGetExecutablePath() {
#if defined(__linux__)

    // On Linux the executable path is retrieved from the /proc/self/exe
    // symlink.
    return
        _DynamicSizedRead(ARCH_PATH_MAX,
            [](char* buffer, size_t* size) {
                const ssize_t n = readlink("/proc/self/exe", buffer, *size);
                if (n == -1) {
                    fprintf(stderr, "Unable to read /proc/self/exe to obtain executable path");
                    *size = std::numeric_limits<size_t>::max();
                    return false;
                }
                else if (static_cast<size_t>(n) >= *size) {
                    // Find out how much space we need.
                    struct stat sb;
                    if (lstat("/proc/self/exe", &sb) == 0) {
                        *size = sb.st_size + 1;
                    }
                    else {
                        // Try iterating on the size.
                        *size *= 2;
                    }
                    return false;
                }
                else {
                    buffer[n] = '\0';
                    return true;
                }
            });

#elif defined(__APPLE__)

    // On Darwin _NSGetExecutablePath() returns the executable path.
    return
        _DynamicSizedRead(ARCH_PATH_MAX,
            [](char* buffer, size_t* size) {
                uint32_t bufsize = *size;
                if (_NSGetExecutablePath(buffer, &bufsize) == -1) {
                    // We're told the correct size.
                    *size = bufsize;
                    return false;
                }
                else {
                    return true;
                }
            });

#elif defined(_WIN32) || defined(_WIN64)

    // On Windows GetModuleFileName() returns the executable path.
    return
        _DynamicSizedRead(ARCH_PATH_MAX,
            [](wchar_t* buffer, size_t* size) {
                DWORD nSize = *size;
                const DWORD n = GetModuleFileNameW(NULL, buffer, nSize);
                if (n == 0) {
                    fprintf(stderr, "Unable to read GetModuleFileName() to obtain executable path");
                    *size = std::numeric_limits<size_t>::max();
                    return false;
                }
                else if (n >= nSize) {
                    // We have to iterate to find a suitable size.
                    *size *= 2;
                    return false;
                }
                else {
                    return true;
                }
            });
#endif
}

#if defined(_WIN32) || defined(_WIN64)

CStringA ExecCmd(const wchar_t* cmd) {
    CStringA strResult;
    HANDLE hPipeRead, hPipeWrite;

    SECURITY_ATTRIBUTES saAttr = {sizeof(SECURITY_ATTRIBUTES)};
    saAttr.bInheritHandle = TRUE; // Pipe handles are inherited by child process.
    saAttr.lpSecurityDescriptor = NULL;

    // Create a pipe to get results from child's stdout.
    if (!CreatePipe(&hPipeRead, &hPipeWrite, &saAttr, 0))
        return strResult;

    STARTUPINFOW si = {sizeof(STARTUPINFOW)};
    si.dwFlags     = STARTF_USESHOWWINDOW | STARTF_USESTDHANDLES;
    si.hStdOutput  = hPipeWrite;
    si.hStdError   = hPipeWrite;
    si.wShowWindow = SW_HIDE; // Prevents cmd window from flashing.
                              // Requires STARTF_USESHOWWINDOW in dwFlags.

    PROCESS_INFORMATION pi = { 0 };

    // CreateProcessW might modify the command
    std::vector<wchar_t> cmdCopy(cmd, cmd + wcslen(cmd));
    cmdCopy.push_back(wchar_t{0});

    BOOL fSuccess = CreateProcessW(NULL, cmdCopy.data(), NULL, NULL, TRUE, CREATE_NEW_CONSOLE, NULL, NULL, &si, &pi);
    if (! fSuccess)
    {
        CloseHandle(hPipeWrite);
        CloseHandle(hPipeRead);
        return strResult;
    }

    bool bProcessEnded = false;
    for (; !bProcessEnded ;)
    {
        // Give some timeslice (50 ms), so we won't waste 100% CPU.
        bProcessEnded = WaitForSingleObject( pi.hProcess, 50) == WAIT_OBJECT_0;

        // Even if process exited - we continue reading, if
        // there is some data available over pipe.
        for (;;)
        {
            char buf[1024];
            DWORD dwRead = 0;
            DWORD dwAvail = 0;

            if (!::PeekNamedPipe(hPipeRead, NULL, 0, NULL, &dwAvail, NULL))
                break;

            if (!dwAvail) // No data available, return
                break;

            if (!::ReadFile(hPipeRead, buf, std::min(sizeof(buf) - 1, size_t(dwAvail)), &dwRead, NULL) || !dwRead)
                // Error, the child process might ended
                break;

            buf[dwRead] = 0;
            strResult += buf;
        }
    }

    CloseHandle(hPipeWrite);
    CloseHandle(hPipeRead);
    CloseHandle(pi.hProcess);
    CloseHandle(pi.hThread);
    return strResult;
}

#endif

fs::path GetHoudiniUserPrefDirFromParentDir(fs::path const& parentDir, const char* hver) {
    auto prefDir = parentDir / (std::string("houdini") + hver);
    if (fs::is_directory(prefDir)) {
        return prefDir.string();
    }

    return {};
}

fs::path GetHoudiniUserPrefDir(const char* hver) {
    if (auto prefDirCstr = std::getenv("HOUDINI_USER_PREF_DIR")) {
        std::string prefDir(prefDirCstr);

        std::string hverPattern("__HVER__");
        auto hverIdx = prefDir.find(hverPattern);
        if (hverIdx != std::string::npos) {
            prefDir.replace(hverIdx, hverPattern.size(), hver);
        }

        return prefDir;
    }

    const char* home = std::getenv("HOME");
    if (home) {
        auto prefDir = GetHoudiniUserPrefDirFromParentDir(home, hver);
        if (!prefDir.empty()) return prefDir;
    }

#if defined(_WIN32) || defined(_WIN64)
    {
        CStringA documentsDir = ExecCmd(LR"(powershell "(new-object -COM Shell.Application).Namespace(0x05).Self.Path")");
        documentsDir.TrimRight();
        auto prefDir = GetHoudiniUserPrefDirFromParentDir((LPCTSTR)documentsDir, hver);
        if (!prefDir.empty()) return prefDir;
    }

    auto userprofile = _wgetenv(L"USERPROFILE");
    if (!userprofile) {
        std::cout << "USERPROFILE environment variable is not set" << std::endl;
        return {};
    }

    auto documentsDir = fs::path(userprofile) / "documents";
    auto prefDir = GetHoudiniUserPrefDirFromParentDir(documentsDir, hver);
    if (!prefDir.empty()) return prefDir;
#elif defined(__APPLE__)
    if (home) {
        auto prefDir = fs::path(home) / "Library" / "Preferences" / "houdini" / hver;
        if (fs::is_directory(prefDir)) {
            return prefDir.string();
        }
    }
#endif

    return {};
}

fs::path GetLopScriptsDir(const char* hver) {
#if defined(__linux__)
    auto scriptsPath = fs::path("/opt/hfs" + std::string(hver) + "/houdini/scripts/lop");
#elif defined(__APPLE__)
    auto searchPath = fs::path("/Applications/Houdini");
    std::string searchPattern = "Houdini" + std::string(hver);
#elif defined(_WIN32) || defined(_WIN64)
    auto searchPath = fs::path("c:\\Program Files\\Side Effects Software");
    std::string searchPattern = "Houdini " + std::string(hver);
#endif
#if defined(__APPLE__) || defined(_WIN32) || defined(_WIN64)
    std::vector<fs::path> subdirs;
    std::error_code ec;
    for (auto& p : fs::directory_iterator(searchPath, fs::directory_options::skip_permission_denied, ec)) {
        if (p.path().stem().string() == searchPattern) {
            subdirs.push_back(p.path());
        }
    }
    if (subdirs.size() != 1) {
        return {};
    }
    auto scriptsPath = subdirs[0] / "houdini" / "scripts" / "lop";
#endif
    if (exists(scriptsPath)) {
        return scriptsPath;
    }

    std::cout << "Can not determine houdini installation. To copy render settings update script enter the path to houdini directory" << std::endl << ">";
    std::string userInput;
    std::getline(std::cin, userInput);
    scriptsPath = fs::path(userInput) / "houdini" / "scripts" / "lop";
    if (!exists(scriptsPath)) {
        std::cout << "Path not found: " << scriptsPath << std::endl;
        return {};
    }
    return scriptsPath;
}

int ActivateHoudiniPlugin(std::string const& pluginName, std::vector<std::pair<const char*, const char*>> const& env, const char* version=nullptr) {
    auto houdiniUserPrefDir = GetHoudiniUserPrefDir("@HOUDINI_MAJOR_MINOR_VERSION@");
    if (houdiniUserPrefDir.empty()) {
        std::cout << "Can not determine HOUDINI_USER_PREF_DIR. Please check your environment and specify HOUDINI_USER_PREF_DIR" << std::endl;
        return EXIT_FAILURE;
    }
    std::cout << "HOUDINI_USER_PREF_DIR: " << houdiniUserPrefDir << std::endl;

    auto executablePath = ArchGetExecutablePath();
    if (executablePath.empty()) {
        std::cout << "Can not determine executable path" << std::endl;
        return EXIT_FAILURE;
    }

    auto package = executablePath.parent_path().lexically_normal().string();
    std::replace(package.begin(), package.end(), '\\', '/');
    std::cout << "Package path: " << package << std::endl;

    auto packagesDir = houdiniUserPrefDir / "packages";
    fs::create_directories(packagesDir);

    auto packageJsonFilepath = packagesDir / (pluginName + ".json");
    std::ofstream packageJson(packageJsonFilepath);
    if (!packageJson.is_open()) {
        std::cout << "Failed to open output file: " << packageJsonFilepath << std::endl;
        return EXIT_FAILURE;
    }

    packageJson << '{';
	if(version) {
		packageJson << '\"' << "version" << '\"';
		packageJson << ':';
		packageJson << '\"' << version << '\"';
		packageJson << ',';
	}
    packageJson << '\"' << "env" << '\"';
    packageJson << ':';
    packageJson << '[';
    for (auto it = env.begin(); it != env.end(); ++it) {
        packageJson << '{';
        packageJson << '\"' << it->first << '\"';
        packageJson << ':';
        packageJson << '\"';
        packageJson << package << it->second;
        packageJson << '\"';
        packageJson << '}';
        if (std::next(it) != env.end()) {
            packageJson << ',';
        }
    }
    packageJson << ']';
    packageJson << '}';

    if (packageJson.fail()) {
        std::cout << "Failed to write output file: " << packageJsonFilepath << '\n' << std::endl;
        return EXIT_FAILURE;
    }

    auto scriptsDir = GetLopScriptsDir("@HOUDINI_MAJOR_MINOR_VERSION@");
    if (!scriptsDir.empty()) {
        std::error_code ec;
        auto src = fs::path(package) / "plugin" / "usd" / "hdRpr" / "resources" / "scripts" / "rendersettings_OnLoaded.py";
        auto dest = scriptsDir / "rendersettings_OnLoaded.py";
        fs::copy(src, dest, fs::copy_options::overwrite_existing, ec);
        if (ec) {
            std::cout << "Cannot copy render settings update script: " << ec.message() << std::endl;
            std::cout << "You might need root/administrator rights to install it" << std::endl;
        }
    } else {
        std::cout << "Can not determine scripts directory. Please check your environment. Render settings update script not installed" << std::endl;
    }

    std::cout << "Successfully activated the plugin" << std::endl;
    return EXIT_SUCCESS;
}
